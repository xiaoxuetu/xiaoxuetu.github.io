<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[小学徒的成长历程]]></title>
  <subtitle><![CDATA[挑战人生无极限，攀登人生更高峰]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://xiaoxuetu.github.io/"/>
  <updated>2015-11-27T16:21:25.000Z</updated>
  <id>http://xiaoxuetu.github.io/</id>
  
  <author>
    <name><![CDATA[小学徒V]]></name>
    <email><![CDATA[hjj20040849@qq.com]]></email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[MySQL入门学习-数据类型及表操作]]></title>
    <link href="http://xiaoxuetu.github.io/2015/11/27/mysql-tables-base-operations/"/>
    <id>http://xiaoxuetu.github.io/2015/11/27/mysql-tables-base-operations/</id>
    <published>2015-11-26T16:29:19.000Z</published>
    <updated>2015-11-27T16:21:25.000Z</updated>
    <content type="html"><![CDATA[<p>通过<a href="/2015/11/19/mysql-environment/">《MySQL入门学习-环境搭建》</a> 和 <a href="/2015/11/22/mysql-database/">《MySQL入门学习-数据库基本操作》</a> 两篇文章，我们成功搭建了MySQL并且熟悉了常用的数据库操作命令。<br>接下来，就让我们一起来学习关于数据表的基本操作吧。</p>
<a id="more"></a>
<h2 id="1_数据类型">1 数据类型</h2><p>在讲解数据表的基本操作之前，我们必须要先来学习下关于MySQL中的数据类型。</p>
<p>从下图中，我们可以很清晰的看得出MySQL总的来说有四种数据类型<br><img src="/assets/blog_img/mysql-tables-base-operations/data-types.png" alt="MySQL数据类型"></p>
<p>就像Java的整数类型总共有byte、short、int、long那样，在MySQL上述的四种数据类型中，具体细分下来，又会有很多种，所以下面我们一种一种来进行细分讲解。</p>
<h4 id="1-1_整型">1.1 整型</h4><p>在MySQL中，整型总共分为5种，分别为 <code>TINYINT</code> 、 <code>SMALLINT</code> 、 <code>MEDIUMINT</code> 、 <code>INT</code> 、 <code>BIGINT</code> ,他们的存储范围和字节分别是:</p>
<table>
<thead>
<tr>
<th>数据类型</th>
<th>存储范围</th>
<th>字节</th>
</tr>
</thead>
<tbody>
<tr>
<td>TINYINT</td>
<td>有符号值： -128 到 127  (-2<sup>7</sup> 到 2<sup>7</sup>-1) <br> 无符号值：0 到 255  (0 到 2<sup>8</sup>-1)</td>
<td>1</td>
</tr>
<tr>
<td>SMALLINT</td>
<td>有符号值： -32768 到 32767  (-2<sup>15</sup> 到 2<sup>15</sup>-1) <br> 无符号值：0 到 65535  (0 到 2<sup>16</sup>-1)</td>
<td>2</td>
</tr>
<tr>
<td>MEDIUMINT</td>
<td>有符号值： -8388608 到 8388607  (-2<sup>23</sup> 到 2<sup>23</sup>-1) <br> 无符号值：0 到 16777215  (0 到 2<sup>24</sup>-1)</td>
<td>3</td>
</tr>
<tr>
<td>INT</td>
<td>有符号值： -2147483648 到 2147483647  (-2<sup>31</sup> 到 2<sup>31</sup>-1) <br> 无符号值：0 到 4294967295 (0 到 2<sup>32</sup>-1)</td>
<td>4</td>
</tr>
<tr>
<td>BIGINT</td>
<td>有符号值： -9223372036854775808 到 9223372036854775807  (-2<sup>63</sup> 到 2<sup>63</sup>-1) <br> 无符号值：0 到 18446744073709551615  (0 到 2<sup>64</sup>-1)</td>
<td>8</td>
</tr>
</tbody>
</table>
<h4 id="1-2_浮点型">1.2 浮点型</h4><p>在MySQL中，浮点型总共分为2种，分别为 <code>FLOAT</code> 、 <code>DOUBLE</code> ，他们的存储范围分别是:</p>
<table>
<thead>
<tr>
<th>数据类型</th>
<th>存储范围</th>
</tr>
</thead>
<tbody>
<tr>
<td>FLOAT[(M, D)]</td>
<td>-3.402823466E+38 到 -1.175494351E-38 <br> 0 和 1.175494351E-38 到 3.402823466E+38</td>
</tr>
<tr>
<td>DOUBLE[(M, D)]</td>
<td>-1.7976931348623157E+308 到 -2.225073858507204E-308 <br> 0 和 -2.225073858507204E-308 到 1.7976931348623157E+308</td>
</tr>
</tbody>
</table>
<blockquote>
<p>注意： 表格中，M表示数字总位数， D表示小数点后面的位数。 如果M 和 D 被省略，根据硬件允许的限制来保存值。单精度浮点数精确到大约7位小数位。</p>
</blockquote>
<h4 id="1-3_日期时间型">1.3 日期时间型</h4><p>在MySQL中，日期时间型总共分为5种，分别是 <code>YEAR</code> 、 <code>TIME</code> 、 <code>DATE</code> 、 <code>DATETIME</code> 、 <code>TIMESTAMP</code> ,它们的详细说明如下：</p>
<table>
<thead>
<tr>
<th>数据类型</th>
<th>字节</th>
<th>详细说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>YEAR[(2｜4)]</td>
<td>1</td>
<td>默认是四位格式。在四位格式中，允许的值是1901到2155和0000。<br> 在两位格式中，允许的值是70到69，表示从1970年到2069年。<br> MySQL以YYYY 格式显示YEAR值。</td>
</tr>
<tr>
<td>TIME</td>
<td>3</td>
<td>范围是’-838:59:59’到’838:59:59’。MySQL以’HH:MM:SS’格式显示TIME值，但允许使用字符串或数字为TIME列分配值</td>
</tr>
<tr>
<td>DATE</td>
<td>3</td>
<td>支持的范围为’1000-01-01’到’9999-12-31’。MySQL以’YYYY-MM-DD’格式显示DATE值，但允许使用字符串或数字为DATE列分配值。</td>
</tr>
<tr>
<td>DATETIME</td>
<td>8</td>
<td>日期和时间的组合。支持的范围是’1000-01-01 00:00:00’到’9999-12-31 23:59:59’。MySQL以’YYYY-MM-DD HH:MM:SS’格式显示DATETIME值，但允许使用字符串或数字为DATETIME列分配值。</td>
</tr>
<tr>
<td>TIMESTAMP</td>
<td>4</td>
<td>范围是’1970-01-01 00:00:00’到 2037年之间。 TIMESTAMP列用于INSERT或UPDATE操作时记录日期和时间。如果你不分配一个值，表中的第一个TIMESTAMP列自动设置为最近操作的日期和时间。也可以通过分配一个NULL值，将TIMESTAMP列设置为当前的日期和时间。</td>
</tr>
</tbody>
</table>
<h4 id="1-4_字符型">1.4 字符型</h4><p>在MySQL中，字符型总共分为8种，它们分别是 <code>CHAR</code> 、 <code>VARCHAR</code> 、 <code>TINYTEXT</code> 、 <code>TEXT</code> 、 <code>MEDIUMTEXT</code> 、 <code>LONGTEXT</code> 、 <code>ENUM</code> 、 <code>SET</code> ，它们的详细说明是：</p>
<table>
<thead>
<tr>
<th>数据类型</th>
<th>存储说明</th>
<th>其它说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>CHAR(M)</td>
<td>M个字节， 0 &lt;= M &lt;= 255</td>
<td>定长类型，比如CHAR(5),如果我们只赋值abc，那么系统会自动在后面补两个空格</td>
</tr>
<tr>
<td>VARCHAR(M)</td>
<td>L+1个字节，其中 L &lt;= M 且 0 &lt;= M &lt;= 65535</td>
<td>变长类型</td>
</tr>
<tr>
<td>TINYTEXT</td>
<td>L+1个字节，其中 L &lt; 2<sup>8</sup></td>
<td></td>
</tr>
<tr>
<td>TEXT</td>
<td>L+2个字节，其中 L &lt; 2<sup>16</sup></td>
<td></td>
</tr>
<tr>
<td>MEDIUMTEXT</td>
<td>L+3个字节，其中 L &lt; 2<sup>24</sup></td>
<td></td>
</tr>
<tr>
<td>LONGTEXT</td>
<td>L+4个字节，其中 L &lt; 2<sup>32</sup></td>
<td></td>
</tr>
<tr>
<td>ENUM(‘value1’,’value2’…)</td>
<td>1或2个字节，取决于枚举值的个数，最多65535个</td>
<td></td>
</tr>
<tr>
<td>SET(‘value1’,’value2’…)</td>
<td>1，2，3，4或者8个字节，取决于SET成员的数目，最多64个成员</td>
<td></td>
</tr>
</tbody>
</table>
<h2 id="2_数据表创建">2 数据表创建</h2><p>了解完数据类型后，让我们一起来学习下怎么去进行数据表的创建。</p>
<h4 id="2-1_数据表基础创建语句">2.1 数据表基础创建语句</h4><p>首先一起来看下，基本的数据表创建格式：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> [<span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span>] &#123;数据表名称&#125; (</span><br><span class="line">    &#123;列名&#125; &#123;数据类型&#125;</span><br><span class="line">);</span></span><br></pre></td></tr></table></figure>
<p>假如我们想要创建一个用户表，它有以下属性：</p>
<ul>
<li>姓名: 因为姓名的长度是变化的，所以它属于变长字符串类型，考虑到人名一般不会太长，因此定义长度为25</li>
<li>年龄: 因为是年龄，所以是整形</li>
<li>工资: 因为钱，可以精确到小数点后两位，但是一般数字不会太大，所以我们使用FLOAT类型即可</li>
</ul>
<p>那么，我们的创建语句如下:</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> <span class="keyword">user</span> (</span><br><span class="line">    <span class="keyword">name</span> <span class="built_in">VARCHAR</span>(<span class="number">25</span>),</span><br><span class="line">    age  TINYINT,</span><br><span class="line">    salary <span class="built_in">FLOAT</span>(<span class="number">7</span>,<span class="number">2</span>)</span><br><span class="line">);</span></span><br></pre></td></tr></table></figure>
<h4 id="2-2_约束">2.2 约束</h4><p>有些时候，我们还说希望对我们的每一列的内容进行一定的限制的，在MySQL中，我们称之为约束。</p>
<p>下面，我们将来讲解下当前MySQL中支持的约束方式。</p>
<h6 id="2-2-1_非空约束">2.2.1 非空约束</h6><p>有时候，我们会希望某个字段禁止为空，这个时候，就对某一列有一个具体的约束了，此时，MySQL提供了一个非空约束，我们只要在某个字段后面添加 <code>NOT NULL</code> 即可。</p>
<p>具体在创建表的时候，格式如下:</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> [<span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span>] &#123;数据表名称&#125; (</span><br><span class="line">    &#123;列名&#125; &#123;数据类型&#125; <span class="keyword">NOT</span> <span class="literal">NULL</span></span><br><span class="line">);</span></span><br></pre></td></tr></table></figure>
<p>比如，我想前面创建的用户表中的用户名不能为空，创建表时的语句则需要更改为:</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> <span class="keyword">user</span> (</span><br><span class="line">    <span class="keyword">name</span> <span class="built_in">VARCHAR</span>(<span class="number">25</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    age  TINYINT,</span><br><span class="line">    salary <span class="built_in">FLOAT</span>(<span class="number">7</span>,<span class="number">2</span>)</span><br><span class="line">);</span></span><br></pre></td></tr></table></figure>
<h6 id="2-2-2_主键约束">2.2.2 主键约束</h6><p>1&gt; 创建主键约束</p>
<p>也许我们会有这么一个需求，我们希望某一列能够保证记录的唯一性并且值不能为空，此时，MySQL提供了一个主键约束，我们只要在字段后面添加 <code>PRIMARY KEY</code> 或者在最后面使用 <code>PRIMARY KEY({字段名称}, {字段名称})</code> 。</p>
<p>具体的SQL语句格式如下：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> [<span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span>] &#123;数据表名称&#125; (</span><br><span class="line">    &#123;列名&#125; &#123;数据类型&#125; PRIMARY <span class="keyword">KEY</span></span><br><span class="line">);</span></span><br></pre></td></tr></table></figure>
<p>或者</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> [<span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span>] &#123;数据表名称&#125; (</span><br><span class="line">    &#123;列名&#125; &#123;数据类型&#125; <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    PRIMARY <span class="keyword">KEY</span>(&#123;字段名称&#125;）</span><br><span class="line">);</span></span><br></pre></td></tr></table></figure>
<p>2&gt; 删除主键约束</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">ALTER</span>  TALBLE &#123;数据表名称&#125; <span class="keyword">DROP</span> PRIMARY <span class="keyword">KEY</span>;</span></span><br></pre></td></tr></table></figure>
<p>3&gt; 主键约束的特点</p>
<p>为了方便和后面讲到的唯一约束进行对比，下面我们来总结一下 主键约束 的特点:</p>
<ul>
<li>设置为主键的列自动设置为非空 <code>NOT NULL</code></li>
<li>主键用语保证记录的唯一性</li>
<li>每张表只能存在一个主键</li>
<li>自动为主键列创建索引</li>
</ul>
<h6 id="2-2-3_唯一约束">2.2.3 唯一约束</h6><p>1&gt; 创建唯一约束</p>
<p>当然，我们有时候想要有多个字段都是唯一的，并且这个字段的值可能是空的，此时，MySQL提供了一个唯一约束，我们只要在字断后面添加 <code>UNIQUE KEY</code> 或者在CREATE中使用 <code>UNIQUE({字段名称})</code> 即可。</p>
<p>具体的SQL语句格式如下：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> [<span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span>] &#123;数据表名称&#125; (</span><br><span class="line">    &#123;列名&#125; &#123;数据类型&#125; <span class="keyword">UNIQUE</span> <span class="keyword">KEY</span></span><br><span class="line">);</span></span><br></pre></td></tr></table></figure>
<p>或者</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> [<span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span>] &#123;数据表名称&#125; (</span><br><span class="line">    &#123;列名&#125; &#123;数据类型&#125; <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    <span class="keyword">UNIQUE</span>(&#123;字段名称&#125;）</span><br><span class="line">);</span></span><br></pre></td></tr></table></figure>
<p>2&gt; 删除唯一约束</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">ALTER</span>  TALBLE &#123;数据表名称&#125; <span class="keyword">DROP</span> &#123;<span class="keyword">INDEX</span> | <span class="keyword">KEY</span>&#125; &#123;唯一约束名称&#125;;</span></span><br></pre></td></tr></table></figure>
<p>3&gt; 唯一约束的特点<br>下面总结下唯一约束的特征并且和主键约束进行对比，差别将会用红色进行标出:</p>
<ul>
<li>保证记录的唯一性</li>
<li><font color="red">字段可以为空值</font></li>
<li><font color="red">每张表可以存在多个唯一约束</font></li>
<li>自动为唯一约束的列创建索引</li>
</ul>
<h6 id="2-2-4_默认约束">2.2.4 默认约束</h6><p>默认约束，它可以给这一列设置一个默认值，当我没有为某一列设置其它值时，那么这一列的值将会是我们设置的默认值。</p>
<p>具体的SQL语句格式如下:</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> [<span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span>] &#123;数据表名称&#125; (</span><br><span class="line">    &#123;列名&#125; &#123;数据类型&#125; <span class="keyword">DEFAULT</span> &#123;默认值&#125;</span><br><span class="line">);</span></span><br></pre></td></tr></table></figure>
<h6 id="2-2-5_外键约束">2.2.5 外键约束</h6><p>1&gt; 创建外键约束</p>
<p>外键约束用于与另一张表的关联。是能确定另一张表记录的字段，用于保持数据的一致性。</p>
<p>具体的SQL语句格式如下：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> [<span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span>] &#123;数据表名称&#125; (</span><br><span class="line">    &#123;列名&#125; &#123;数据类型&#125; FOREIGN <span class="keyword">KEY</span> <span class="keyword">REFERENCES</span> &#123;关联数据表名称&#125;(关联字断名称)</span><br><span class="line">);</span></span><br></pre></td></tr></table></figure>
<p>或者</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> [<span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span>] &#123;数据表名称&#125; (</span><br><span class="line">    &#123;列名&#125; &#123;数据类型&#125;,</span><br><span class="line">    FOREIGN <span class="keyword">KEY</span>(&#123;字段名称&#125;) <span class="keyword">REFERENCES</span> &#123;关联数据表名称&#125;(关联字断名称)</span><br><span class="line">);</span></span><br></pre></td></tr></table></figure>
<p>2&gt; 删除外键约束</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">ALTER</span>  TALBLE &#123;数据表名称&#125; <span class="keyword">DROP</span> FOREIGN <span class="keyword">KEY</span> &#123;外键约束名称&#125;;</span></span><br></pre></td></tr></table></figure>
<h6 id="2-2-6_约束分类">2.2.6 约束分类</h6><p>通过前面的介绍，我们可以了解到，约束总共有5种，但是大家知道吗？约束从另外一个角度来说，可以分成两类：</p>
<ul>
<li>表级约束: 与列定义相互独立，不包含在列定义中；通常用于对多个列一起进行约束，与定义用’,’ 分隔；必须指出要约束的列的名称</li>
<li>列级约束: 包含在列定义中；直接跟在该列的其它定义之后，用空格分隔；不必指定列名</li>
</ul>
<p>通过前面的定义以及各种约束的讲解，我们可以了解到：</p>
<ul>
<li>非空约束、默认约束只能用于列级约束的创建</li>
<li>主键约束、外键约束、唯一约束皆可用于表级约束和列级约束的创建</li>
</ul>
<h4 id="2-3_表的基本操作">2.3 表的基本操作</h4><h6 id="2-3-1_字段操作">2.3.1 字段操作</h6><p><strong> 1&gt; 向表中添加新的字段 </strong></p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> &#123;数据表名称&#125; <span class="keyword">ADD</span> &#123;列名称&#125; &#123;列定义&#125;;</span></span><br></pre></td></tr></table></figure>
<p><strong> 2&gt; 修改列名称 </strong></p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> &#123;数据表名称&#125; <span class="keyword">CHANGE</span> [<span class="keyword">COLUMN</span>] &#123;列名称&#125; &#123;新的列名称&#125; &#123;列定义&#125; [<span class="keyword">FIRST</span> | <span class="keyword">AFTER</span> &#123;列名称&#125;];</span></span><br></pre></td></tr></table></figure>
<p><strong> 3&gt; 修改列定义 </strong></p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> &#123;数据表名称&#125; <span class="keyword">MODIFY</span> [<span class="keyword">COLUMN</span>] &#123;列名称&#125; &#123;列定义&#125; [<span class="keyword">FIRST</span> | <span class="keyword">AFTER</span> &#123;列名称&#125;];</span></span><br></pre></td></tr></table></figure>
<p><strong> 4&gt; 删除列定义 </strong></p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> &#123;数据表名称&#125; <span class="keyword">DROP</span> [<span class="keyword">COLUMN</span>] &#123;列名称&#125;;</span></span><br></pre></td></tr></table></figure>
<h6 id="2-3-2_数据表重命名">2.3.2 数据表重命名</h6><p>给现有的数据表重新命名</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> &#123;数据表名称&#125; RENAME [<span class="keyword">TO</span> | <span class="keyword">AS</span>] &#123;新数据表名称&#125;;</span></span><br></pre></td></tr></table></figure>
<p>或者</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">RENAME <span class="keyword">TABLE</span> &#123;数据表名称&#125; RENAME <span class="keyword">TO</span> &#123;新数据表名称&#125; [,  &#123;数据表名称<span class="number">1</span>&#125; <span class="keyword">TO</span>  &#123;新数据表名称<span class="number">1</span>&#125;];</span></span><br></pre></td></tr></table></figure>
<p><br><br></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>通过<a href="/2015/11/19/mysql-environment/">《MySQL入门学习-环境搭建》</a> 和 <a href="/2015/11/22/mysql-database/">《MySQL入门学习-数据库基本操作》</a> 两篇文章，我们成功搭建了MySQL并且熟悉了常用的数据库操作命令。<br>接下来，就让我们一起来学习关于数据表的基本操作吧。</p>]]>
    
    </summary>
    
      <category term="MySQL" scheme="http://xiaoxuetu.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[MySQL入门学习-数据库基本操作]]></title>
    <link href="http://xiaoxuetu.github.io/2015/11/22/mysql-database/"/>
    <id>http://xiaoxuetu.github.io/2015/11/22/mysql-database/</id>
    <published>2015-11-22T06:52:38.000Z</published>
    <updated>2015-11-22T14:54:43.000Z</updated>
    <content type="html"><![CDATA[<p>在<a href="/2015/11/19/mysql-environment/">《MySQL入门学习-环境搭建》</a>中，我们已经成功的安装了MySQL，并且学习了常用的MySQL操作命令，下面我们来学习关于数据库的基本操作。</p>
<a id="more"></a>
<h2 id="1_查看当前数据库">1 查看当前数据库</h2><p>执行以下命令，可以查看当前MySQL中所拥有的全部数据库</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SHOW DATABASES;</span><br></pre></td></tr></table></figure>
<p>上面这条命令等价于</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SHOW SCHEMAS;</span><br></pre></td></tr></table></figure>
<p>在MySQL中， SCHEMAS 等价于 DATABASES。</p>
<p>当然，我们也可以查看当前MySQL中名字符合某个规则的数据库，此时，我们按照以下的格式执行即可.</p>
<figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SHOW DATABASES <span class="preprocessor">[</span>LIKE <span class="string">'pattern'</span> | <span class="keyword">WHERE</span> expr<span class="preprocessor">]</span><span class="markup">;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意：上面这条命令中，中括号 [] 括起来的表示是可选的，根据需要而出现。</p>
</blockquote>
<h2 id="2_默认数据库">2 默认数据库</h2><p>通过上面的命令，我们可以知道刚安装好的MySQL会有四个默认创建好了的数据库，他们的名字以及相关作用是：</p>
<table>
<thead>
<tr>
<th>数据库</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>infomation_schema</td>
<td>虚拟库，保存当前MySQL服务器已有数据库和表的统计信息，不占用物理磁盘空间，其内的数据保存在系统内存里。</td>
</tr>
<tr>
<td>mysql</td>
<td>授权库，保存用户的授权信息，占用物理磁盘空间。</td>
</tr>
<tr>
<td>perfomance_schema</td>
<td>保存数据库服务器运行时的运行参数，占用物理磁盘空间</td>
</tr>
<tr>
<td>test</td>
<td>公共库，任意一个用户连接到数据库服务器后，对此库都拥有完全权限，占用物理磁盘空间。</td>
</tr>
</tbody>
</table>
<h4 id="2-1_infomation_schema_中的数据表说明">2.1 infomation_schema 中的数据表说明</h4><p>infomation_schema 中会有很多的数据表，我们一起来看下这个数据库中部分数据表的作用：</p>
<ul>
<li><strong> SCHEMATA表 </strong> ： 提供了当前mysql实例中所有数据库的信息。我们执行 <code>SHOW DATABASES;</code> 的结果就是取自此表。</li>
<li><strong> TABLES表 </strong>   ： 提供了关于数据库中的表的信息（包括视图）。详细表述了某个表属于哪个schema，表类型，表引擎，创建时间等信息。我们执行 <code>SHOW TABLES FROM {数据库名称};</code> 的结果就是取自此表。</li>
<li><strong> COLUMNS表 </strong>  ： 提供了表中的列信息。详细表述了某张表的所有列以及每个列的信息。我们执行 <code>SHOW COLUMNS FROM {数据库名称}.{数据表名称};</code> 的结果就是取自此表。</li>
<li><strong> STATISTICS表 </strong> ： 提供了关于表索引的信息。我们执行 <code>SHOW INDEX FROM {数据库名称}.{数据表名称};</code> 的结果就是取自此表。</li>
<li><strong> USER_PRIVILEGES（用户权限）表 </strong> ：给出了关于所有用户权限的信息。该信息源自mysql.user授权表。是非标准表。</li>
<li><strong> SCHEMA_PRIVILEGES（方案权限）表 </strong> ：给出了关于方案（数据库）权限的信息。该信息来自mysql.db授权表。是非标准表。</li>
<li><strong> TABLE_PRIVILEGES（表权限）表 </strong> ：给出了关于表权限的信息。该信息源自mysql.tables_priv授权表。是非标准表。</li>
<li><strong> COLUMN_PRIVILEGES（列权限）表 </strong> ：给出了关于列权限的信息。该信息源自mysql.columns_priv授权表。是非标准表。</li>
<li><strong> CHARACTER_SETS（字符集）表 </strong> ：提供了mysql实例可用字符集的信息。我们执行 <code>SHOW CHARACTER SET;</code> 结果集就是取自此表。</li>
<li><strong> COLLATIONS表 </strong> ：提供了关于各字符集的对照信息。</li>
<li><strong> COLLATION_CHARACTER_SET_APPLICABILITY表 </strong> ：指明了可用于校对的字符集。这些列等效于 <code>SHOW COLLATION</code> 的前两个显示字段。</li>
<li><strong> TABLE_CONSTRAINTS表 </strong> ：描述了存在约束的表。以及表的约束类型。</li>
<li><strong> KEY_COLUMN_USAGE表 </strong> ：描述了具有约束的键列。</li>
<li><strong> ROUTINES表 </strong> ：提供了关于存储子程序（存储程序和函数）的信息。此时，ROUTINES表不包含自定义函数（UDF）。</li>
<li><strong> VIEWS表 </strong> ：给出了关于数据库中的视图的信息。需要有 <code>SHOW VIEWS</code> 权限，否则无法查看视图信息。</li>
<li><strong> TRIGGERS表 </strong> ：提供了关于触发程序的信息。必须有super权限才能查看该表</li>
</ul>
<h2 id="3_查看当前所使用的数据库">3 查看当前所使用的数据库</h2><p>通过以下命令，我们可以查到当前我们正在使用的数据库</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT DATABASE();</span><br></pre></td></tr></table></figure>
<h2 id="4_创建数据库">4 创建数据库</h2><p>通过以下命令，我们可以创建一个新的数据库</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; CREATE DATABASE [IF NOT EXISTS] &#123;数据库名称&#125; [DEFAULT] CHARACTER SET = [字符集名称]</span><br></pre></td></tr></table></figure>
<p>例如，我们要创建一个名字为 xiaoxuetu 的数据库:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; CREATE DATABASE xiaoxuetu;</span><br></pre></td></tr></table></figure>
<p>如果我们要创建一个名字为 xiaoxuetu 并且 字符编码为 UTF8 的数据库:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; CREATE DATABASE IF NOT EXISTS xiaoxuetu DEFAULT CHARACTER SET = UTF8;</span><br></pre></td></tr></table></figure>
<h2 id="5_修改数据库">5 修改数据库</h2><p>执行以下命令可以更新数据库的全局特性, 目前在MySQL中，只能用于修改数据库字符集和校对规则名称：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; ALTER DATABASE &#123;数据库名称&#125;</span><br><span class="line">        [DEFAULT] CHARACTER SET &#123;字符集名称&#125;</span><br><span class="line">       |[DEFAULT] COLLATE &#123;校对规则名称&#125;</span><br></pre></td></tr></table></figure>
<p>关于这方面，大家可以直接参考：<a href="http://www.kuqin.com/mysql5.1_doc/charset.html" target="_blank" rel="external">http://www.kuqin.com/mysql5.1_doc/charset.html</a></p>
<h2 id="6_删除数据库">6 删除数据库</h2><p>通过以下命令，我们可以删除一个已经存在的数据库</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; DROP DATABASE [IF EXISTS] &#123;数据库名称&#125;;</span><br></pre></td></tr></table></figure>
<p><br><br></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>在<a href="/2015/11/19/mysql-environment/">《MySQL入门学习-环境搭建》</a>中，我们已经成功的安装了MySQL，并且学习了常用的MySQL操作命令，下面我们来学习关于数据库的基本操作。</p>]]>
    
    </summary>
    
      <category term="MySQL" scheme="http://xiaoxuetu.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[MySQL入门学习-环境搭建]]></title>
    <link href="http://xiaoxuetu.github.io/2015/11/19/mysql-environment/"/>
    <id>http://xiaoxuetu.github.io/2015/11/19/mysql-environment/</id>
    <published>2015-11-19T12:51:48.000Z</published>
    <updated>2015-11-22T13:05:01.000Z</updated>
    <content type="html"><![CDATA[<p><img src="/assets/blog_img/mysql-environment/mysql-logo.png" alt="图片来自网络－MySQL LOGO"><br>众所周知，数据库是存放数据的仓库。为了方便数据的存储和管理，将数据按照特定的规律存储在磁盘上。通过数据库管理系统，我们可以有效的组织和管理存储在数据库中的数据。<br>目前，市面上比较流行的数据库有Oracle、MySQL等等。下面，我将会跟大家一起学习关于MySQL的基本知识。<br><a id="more"></a></p>
<h2 id="1_MySQL_环境搭建">1 MySQL 环境搭建</h2><p>本篇文章将会以Mac系统为例子进行安装和环境配置。</p>
<h4 id="1-1_MySQL的安装及环境配置">1.1 MySQL的安装及环境配置</h4><p><strong> 1&gt; 下载及安装 </strong></p>
<p>下载地址：<a href="http://dev.mysql.com/downloads/mysql/" target="_blank" rel="external">http://dev.mysql.com/downloads/mysql/</a></p>
<p>点击上面的链接跳转到下载页面，根据你的系统以及版本，选择适合你电脑的安装包。比如我的是Mac OSX 10.10，所以我选择Mac OSX 并且下载了10.10版本的DMG安装包。如下图:<br><img src="/assets/blog_img/mysql-environment/mysql-download.png" alt="MySQL 下载指南"></p>
<p>下载完成后，双击并且按照引导进行安装， <font color="red">安装完成后，系统会提示一个随机密码，我们要注意保存下来</font></p>
<p><strong> 2&gt; 配置环境变量 </strong> </p>
<p>我们会发现通过DMG安装的MySQL的目录在 <code>/usr/local/mysql</code> , 接下来打开 <code>$HOME</code> 目录下的 <code>.bash_profile</code> 文件，并且配置以下环境变量</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> LC_ALL=en_US.UTF-<span class="number">8</span></span><br><span class="line"><span class="built_in">export</span> LANG=en_US.UTF-<span class="number">8</span></span><br><span class="line"><span class="built_in">export</span> MYSQL_HOME=<span class="string">"/usr/local/mysql"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$&#123;PATH&#125;</span>:<span class="variable">$&#123;MYSQL_HOME&#125;</span>/bin</span><br></pre></td></tr></table></figure>
<p>配置完成并且保存后，执行以下命令加载配置文件使其立即在当前终端生效<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">source</span> .bash_profile</span><br></pre></td></tr></table></figure></p>
<p><strong> 3&gt; 修改密码 </strong><br>执行以下命令，输入第一步安装的时候生成的随机密码进入MySQL</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mysql -u root -p</span><br></pre></td></tr></table></figure>
<p>进入MySQL后，你执行任何操作，它都会提示你修改初始密码后才能进行操作的，所以执行以下命令进行密码修改</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SET PASSWORD = PASSWORD(<span class="string">"你的密码"</span>);</span><br></pre></td></tr></table></figure>
<p><br></p>
<h4 id="1-2_mycli_的安装及配置">1.2 mycli 的安装及配置</h4><p>mycli 可以自动补齐输入和语法高亮的MySQL的开源命令行接口，除了MySQL以外，它还支持MariaDB 和 Percona。效果图如下：<br><img src="/assets/blog_img/mysql-environment/mycli-effect.gif" alt="图片来自网络"></p>
<p><strong> 1&gt; 通过 pip 或者 easy_install 进行安装 </strong><br>如果你的电脑已经安装了 pip 或者 easy_install， 我们将可以使用以下方式进行安装</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo pip install mycli</span><br></pre></td></tr></table></figure>
<p>或者<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo easy_install mycli</span><br></pre></td></tr></table></figure></p>
<p><br>  </p>
<p><strong> 2&gt; Mac 下使用brew进行安装 </strong><br>在mac下，如果你安装了pip 或者 easy_install， 你也可以直接使用第一种方式进行安装，否则你需要先执行以下命令进行brew进行安装</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ruby <span class="operator">-e</span> <span class="string">"<span class="variable">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span>"</span></span><br></pre></td></tr></table></figure>
<p>如果你已经安装了brew，则可以跳过这个步骤，直接执行以下命令安装 mycli</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ brew update &amp;&amp; brew install mycli</span><br></pre></td></tr></table></figure>
<p><br>  </p>
<p><strong> 3&gt; Linux 的安装方式 </strong></p>
<p>参考链接: <a href="http://mycli.net/install" target="_blank" rel="external">http://mycli.net/install</a></p>
<h2 id="2_MySQL_数据库常用操作">2 MySQL 数据库常用操作</h2><p>本章节中主要介绍数据库的服务启动、终止、版本查询、提示符修改等相关命令</p>
<h4 id="2-1_服务启动命令">2.1 服务启动命令</h4><p>下面将会按照平台进行讲解</p>
<p><strong> 1&gt; Window </strong><br>启动: <code>net start mysql</code><br>停止: <code>net stop mysql</code> </p>
<p><strong> 2&gt; Ubuntu </strong><br>启动: <code>sudo service mysql start</code><br>停止: <code>sudo service mysql stop</code><br>重启: <code>sudo service mysql restart</code></p>
<p><strong> 2&gt; Mac OSX</strong><br>启动: <code>sudo /usr/local/mysql/support-files/mysql.server start</code><br>停止: <code>sudo /usr/local/mysql/support-files/mysql.server stop</code><br>重启: <code>sudo /usr/local/mysql/support-files/mysql.server restart</code> </p>
<h4 id="2-2_MySQL_版本查询">2.2 MySQL 版本查询</h4><p>MySQL的版本查询总共有2种</p>
<p>1&gt; 方式1:<br>直接在终端执行命令 <code>mysql --version</code> </p>
<p>2&gt; 方式2:<br>先登陆mysql，执行以下SQL语句：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT VERSION();</span><br></pre></td></tr></table></figure></p>
<h4 id="2-3_MySQL_提示符修改">2.3 MySQL 提示符修改</h4><p>MySQL 默认的提示符是 <code>mysql&gt;</code> ，以下的修改方式都只对当前的登陆的mysql客户端有效，如果我们退出重新登录，提示符将会变回默认的 <code>mysql&gt;</code></p>
<p>1&gt; 方式1: 在登陆mysql的同时使用 <code>--prompt</code> 进行修改，如：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ mysql -uroot --prompt \u@\h&gt;  -p</span><br><span class="line"><span class="comment"># 输入密码进去后，将会发现MySQL的提示符变成了 root@localhost&gt;</span></span><br></pre></td></tr></table></figure>
<p>2&gt; 方式2: 进入MySQL后，使用 <code>PROMPT</code> 指令修改提示符<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; PROMPT \u@\h&gt;</span><br><span class="line"><span class="comment"># 输入密码进去后，将会发现MySQL的提示符变成了 root@localhost&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>接下来解释一下上面提到的 <code>\u</code> 和 <code>\h</code> 的含义</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>\D</td>
<td>完整的日期</td>
</tr>
<tr>
<td>\d</td>
<td>当前数据库</td>
</tr>
<tr>
<td>\h</td>
<td>服务器名称</td>
</tr>
<tr>
<td>\u</td>
<td>当前用户</td>
</tr>
</tbody>
</table>
<h4 id="2-4_退出数据库">2.4 退出数据库</h4><p>在MySQL中执行以下命令都可以推出当前客户端</p>
<p>1&gt; <code>quit</code><br>2&gt; <code>exit</code><br>3&gt; <code>\q</code> </p>
<h4 id="2-5_其它命令">2.5 其它命令</h4><p>1&gt; 查看当前时间</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT NOW();</span><br></pre></td></tr></table></figure>
<p>2&gt; 查看当前用户</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT USER();</span><br></pre></td></tr></table></figure>
<h4 id="2-6_登录MySQL">2.6 登录MySQL</h4><p>最基本简单的登录方式是输入以下命令然后按照提示输入密码即可。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mysql -uroot -p</span><br></pre></td></tr></table></figure></p>
<p>如果你需要指定远程主机，则可以使用 <code>-h</code> ，当然MySQL登录的时候，还可以指定其它的参数，具体根据你的需要选择使用即可</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>-D, --database={你的数据库名称}</td>
<td>打开指定数据库</td>
</tr>
<tr>
<td>--delimiter={分隔符}</td>
<td>指定分隔符</td>
</tr>
<tr>
<td>-h, --host={服务器URL}</td>
<td>服务器名称</td>
</tr>
<tr>
<td>-p, --password[=密码]</td>
<td>密码</td>
</tr>
<tr>
<td>-P, --port={端口号}</td>
<td>端口号</td>
</tr>
<tr>
<td>--prompt={提示符}</td>
<td>提示符</td>
</tr>
<tr>
<td>-u, --user={用户名}</td>
<td>用户名称</td>
</tr>
<tr>
<td>-V, --version</td>
<td>输出版本信息并且退出</td>
</tr>
</tbody>
</table>
<p><br><br></p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="/assets/blog_img/mysql-environment/mysql-logo.png" alt="图片来自网络－MySQL LOGO"><br>众所周知，数据库是存放数据的仓库。为了方便数据的存储和管理，将数据按照特定的规律存储在磁盘上。通过数据库管理系统，我们可以有效的组织和管理存储在数据库中的数据。<br>目前，市面上比较流行的数据库有Oracle、MySQL等等。下面，我将会跟大家一起学习关于MySQL的基本知识。<br>]]>
    
    </summary>
    
      <category term="MySQL" scheme="http://xiaoxuetu.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[2015年职级评定总结]]></title>
    <link href="http://xiaoxuetu.github.io/2015/11/08/staff-level-2015/"/>
    <id>http://xiaoxuetu.github.io/2015/11/08/staff-level-2015/</id>
    <published>2015-11-07T17:11:42.000Z</published>
    <updated>2015-11-19T12:53:24.000Z</updated>
    <content type="html"><![CDATA[<p><img src="/assets/blog_img/staff-level-2015/staff-level-2015.jpg" alt="图片来自网络"></p>
<p>在昨天进行了职业生涯中的第一次职级评定，让人感到紧张的同时却又觉得刺激、兴奋。<br>现在回想起来，虽然对自己当时的表现和回答不是特别满意，但是不管结果怎样，还是希望自己不要气馁，要继续努力。<br>为了能够快速的让自己快速成长并且能够给予后人一些经验，所以还是做了以下总结。  </p>
<a id="more"></a> 
<p><strong> 1. 熟悉公司的核心业务 </strong></p>
<p>虽然我们是技术人员，但是进入一家公司后，我们首要学习的并不是这家企业的核心技术，而是核心业务。一定要谨记技术只是我们实现业务的手段。<br>只有熟悉公司的业务，我们才能够更好的完成任务。<br>只有熟悉公司的业务，我们才会发现，原来有那么多有价值的事情等待着自己去挖掘，去实践。<br>只有熟悉公司的业务，你才能够站在更高的层面进行思考。<br>总之，也只有我们熟悉了公司的核心业务，才能够利用我们的技术，为公司做出更加有价值的事情。</p>
<p><strong> 2. 虽然要扬长避短，但是也不能逃避弱点 </strong></p>
<p>我们要发挥自己的长处，去做我们最适合、最擅长的事情，但是对于一些致命的短处，我们不能去逃避。<br>比如我个人的短处是 在公众场合分享的时候容易紧张， 临场总结能力比较差，这个对我的未来发展是非常不利的。毕竟这个短处意味着我不能很淡定、清晰的向其他人传达出自己的意思。<br>为了解决这个问题，我就必须努力的让自己多点主动申请在周会、或者其他公共场合上锻炼，克服这个缺点。</p>
<p><strong> 3. 适当的拓展知识面 </strong></p>
<p>一直以来，个人在新知识的学习、问题的攻坚上都是非常的强，但是很多时候，个人学习范围主要都是在针对这个问题的解决方法上，很少去进行横向拓展，导致知识面比较窄。这样子是不利于未来的思考和创新的。</p>
<p>所以适当的时候，我们要进行拓展，比如我们学习Java的时候，偶尔有空的时候可以去了解下Python或者其他相关的语言，也许有时候，你会发现在不同的场景，使用不同的语言能够快速的帮助我们解决问题。</p>
<p>当然上面只是举个例子，我们并不能将自己局限于技术当中，对吧～</p>
<p><strong> 4. 不妨时常放空自己，对自己做下总结 </strong></p>
<p>1&gt; 定时对自己做的任务进行总结，进行文档纪录，这样子做的好处是：</p>
<ul>
<li>方便上级以及同事了解你做的事情, 同时也能够提升个人影响力</li>
<li>这是你努力过后的产物，同时也是你晋升时的能力证据</li>
<li>锻炼自己的总结能力</li>
</ul>
<p>2&gt; 定时对自己这段时间的做事方式进行总结，哪些做得好，哪些做的不好，遇到问题，你的处理方式是怎样的，有没有更好的方式。</p>
<p><strong> 5. 目标 &amp; 持续学习 </strong></p>
<p>给自己一个长远的目标，并将其进行分解成多个阶段，通过达到阶段性的目标，从而实现自己长远的那个目标。</p>
<p>有了目标，你就会有一个持续学习的动力。只有不断的学习知识，不仅仅是学习新的知识，还要温故旧知识并且深入学习，只有这样，你才能够进步。</p>
<p><strong> 6. 你的第一份工作不会决定你的一生，但是会影响你后面的职业发展 </strong> </p>
<p>是的，你的第一份工作并不会决定你的一生，但是现在社会招聘很多都要求你有在相关职位上有几年的工作经验，所以假设你在测试工程师做了3年后，你想到另外一个企业当一个研发工程师，那是很困难的。所以你的第一份工作会影响到你后面的职业发展。</p>
<p>如果你希望可以转行，那么应该在刚工作的一两年尽快做好储备并且下定决心转换。</p>
<p><strong> 7. 最靠谱的工作观是干一行爱一行 </strong></p>
<p>只有当我们爱上我们的工作，才能再里面找到我们的快乐，才能够毫无怨言，尽职尽责，一丝不苟的完成，也只有这样，我们才能再工作上取得更大的成就。</p>
<p><strong> 8. 学会站在老大的角度上，花更多的时间去思考、总结与规划 </strong></p>
<p>尝试着站在老大的角度去思考，假如你就是老大，你去做这件事情，你会怎么去做？ 对于人员，你会怎么安排？对于团队，你会怎么去管。为什么最终老大的做法跟你想的不一样？他的好还是你的好？ </p>
<p>就这样，慢慢的提高自己的思想层次。</p>
<p><strong> 9. 我们本来就一无所有，所以根本不用害怕失去什么，我们唯一要做的是一直往前，走投无路大不了回到原点，我们唯一害怕失去的是永不服输的心 </strong> </p>
<p><br><br></p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="/assets/blog_img/staff-level-2015/staff-level-2015.jpg" alt="图片来自网络"></p>
<p>在昨天进行了职业生涯中的第一次职级评定，让人感到紧张的同时却又觉得刺激、兴奋。<br>现在回想起来，虽然对自己当时的表现和回答不是特别满意，但是不管结果怎样，还是希望自己不要气馁，要继续努力。<br>为了能够快速的让自己快速成长并且能够给予后人一些经验，所以还是做了以下总结。  </p>]]>
    
    </summary>
    
      <category term="职业生涯" scheme="http://xiaoxuetu.github.io/tags/%E8%81%8C%E4%B8%9A%E7%94%9F%E6%B6%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Shiro学习-介绍]]></title>
    <link href="http://xiaoxuetu.github.io/2015/09/26/shiro-introduces/"/>
    <id>http://xiaoxuetu.github.io/2015/09/26/shiro-introduces/</id>
    <published>2015-09-26T09:02:03.000Z</published>
    <updated>2015-11-08T15:14:57.000Z</updated>
    <content type="html"><![CDATA[<p>待更新…</p>
<a id="more"></a>
]]></content>
    <summary type="html">
    <![CDATA[<p>待更新…</p>]]>
    
    </summary>
    
      <category term="shiro" scheme="http://xiaoxuetu.github.io/tags/shiro/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[利用Hexo搭建个人博客－博客发布篇]]></title>
    <link href="http://xiaoxuetu.github.io/2015/09/06/hexo-issue/"/>
    <id>http://xiaoxuetu.github.io/2015/09/06/hexo-issue/</id>
    <published>2015-09-06T12:22:02.000Z</published>
    <updated>2015-11-19T12:52:53.000Z</updated>
    <content type="html"><![CDATA[<p><img src="/assets/blog_img/hexo-issue/hexo_issue.png" alt="新品发布会-图片来自网络"></p>
<p>通过 <a href="/2015/08/29/hexo-mac-environment/">《利用Hexo搭建个人博客－环境搭建篇》</a>  以及 <a href="/2015/08/31/hexo-guide/">《利用Hexo搭建个人博客－博客初始化篇》</a>，我们了解到了利用Hexo搭建个人博客需要的环境以及配置，下面这篇文章将会介绍如何把我们的博文发布到github上。</p>
<a id="more"></a>
<h2 id="1_GitHub_配置">1 GitHub 配置</h2><p>在<a href="/2015/08/29/hexo-mac-environment/">《利用Hexo搭建个人博客－环境搭建篇》</a>一文中，我们对Github有了一个基本的了解，并且已经在本地搭建好了git的基本环境。如果想要发布博文到github上，我们还需要到github上去进行用户的注册。</p>
<h4 id="1-1_注册GitHub">1.1 注册GitHub</h4><p>链接: <a href="https://github.com/" target="_blank" rel="external">点击访问</a></p>
<p><strong> 1&gt; </strong> 点击访问上述链接，如下图点入用户名、邮箱、密码，点击 <code>Sign up for GitHub</code> 按钮进入下一步</p>
<p><img src="/assets/blog_img/hexo-issue/github_register.png" alt="注册GitHub"></p>
<p><strong> 2&gt; </strong> 如图，选择红色方框中的免费模式，当然如果你有其他需求也可以选择付费的其他模式，点击 <code>Finish sign up</code> 完成注册</p>
<p><img src="/assets/blog_img/hexo-issue/github_choose_plan.png" alt="选择GitHub模式"></p>
<p><strong> 3&gt; </strong> 完成上述步骤后,你的注册邮箱将会收到一封来自GitHub的验证邮件, 登陆邮箱点击访问邮件中的邮件链接进行验证。<br>   如果你没有收到激活邮件，可以按照下面的步骤说明和图片进行操作：</p>
<ul>
<li>a&gt; 点击 <code>1</code> 标注处的下拉菜单， 选择 <code>Setting</code> </li>
<li>b&gt; 点击 <code>2</code> 标注处的 <code>Emails</code>  </li>
<li>c&gt; 点击 <code>3</code> 标注处的 <code>Resend</code> 重新发送验证邮件 </li>
</ul>
<p><img src="/assets/blog_img/hexo-issue/github_active_email.png" alt="重发邮箱验证邮件"></p>
<h4 id="1-2_添加SSH_Key">1.2 添加SSH Key</h4><p>注册完以后，为了让我们的电脑能直接免密码通过SSH访问GitHub，需要将我们的SSH Key添加到GitHub上。<br>首先我们需要打开终端，跟着下面的步骤进行操作即可。</p>
<p><strong> 1&gt; </strong> 执行以下命令，检查我们的终端是否已经存在SSH Key</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ls -al ~/.ssh</span><br></pre></td></tr></table></figure>
<p>如果你的电脑已经存在SSH Key，终端将会显示如下图所示的内容, 此时可以跳过 <code>第2步</code> 直接到 <code>第3步</code> 。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">xiaoxuetu:~ kevin$ ls -al ~/.ssh/</span><br><span class="line">total <span class="number">80</span></span><br><span class="line">drwx------   <span class="number">9</span> kevin  staff    <span class="number">306</span> Aug <span class="number">23</span> <span class="number">23</span>:<span class="number">51</span> .</span><br><span class="line">drwxr-xr-x+ <span class="number">45</span> kevin  staff   <span class="number">1530</span> Sep  <span class="number">4</span> <span class="number">00</span>:<span class="number">28</span> ..</span><br><span class="line">-rw-------   <span class="number">1</span> kevin  staff   <span class="number">1679</span> Aug  <span class="number">9</span>  <span class="number">2014</span> id_rsa</span><br><span class="line">-rw-r--r--   <span class="number">1</span> kevin  staff    <span class="number">399</span> Aug  <span class="number">9</span>  <span class="number">2014</span> id_rsa.pub</span><br></pre></td></tr></table></figure>
<p><strong> 2&gt; </strong> 执行以下命令生成 SSH Key</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -b <span class="number">4096</span> -C <span class="string">"your_email@example.com"</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意<br>我们推荐使用默认的配置，所以接下来如果提示<br> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Enter file <span class="keyword">in</span> <span class="built_in">which</span> to save the key (/Users/you/.ssh/id_rsa): [Press enter]`</span><br></pre></td></tr></table></figure></p>
<p>或者<br> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Enter passphrase (empty <span class="keyword">for</span> no passphrase): [Type a passphrase]</span><br><span class="line"><span class="comment"># Enter same passphrase again: [Type passphrase again]</span></span><br></pre></td></tr></table></figure></p>
<font color="red"> 我们都直接按Enter键即可 </font>

</blockquote>
<p><strong> 3&gt; </strong> 添加SSH Key 到 ssh-agent 中<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">eval</span> <span class="string">"<span class="variable">$(ssh-agent -s)</span>"</span></span><br><span class="line">$ ssh-add ~/.ssh/id_rsa</span><br></pre></td></tr></table></figure></p>
<p><strong> 4&gt; </strong> 复制SSH Key 到 剪贴板中</p>
<ul>
<li><p>a&gt; 方式1: 使用pbcopy命令，如果你的电脑不支持该命令，可以使用方式二</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pbcopy &lt; ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure>
</li>
<li><p>b&gt; 方式2: 先使用cat命令读取展现内容到终端，选择终端展现出来的SSH Key复制</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cat &lt; ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p><strong> 5&gt; </strong> 添加我们刚才复制的SSH Key到账户中</p>
<ul>
<li>a&gt; 点击 <code>1</code> 标注处的下拉菜单， 选择 <code>Setting</code> </li>
<li>b&gt; 点击 <code>2</code> 标注处的 <code>SSH Keys</code>  </li>
<li>c&gt; 点击 <code>3</code> 标注处的 <code>Add SSH Key</code> ， 这个时候回出现 <code>3</code> 所标注区域的内容</li>
<li>d&gt; <code>Title</code> 处我们可以根据我们的规范随便命名，另外，将我们刚刚复制的 SSH Key 复制到 <code>Key</code> 中</li>
<li>e&gt; 点击 <code>5</code> 标注处的 <code>Add Key</code> 保存</li>
</ul>
<p><img src="/assets/blog_img/hexo-issue/github_add_ssh_key.png" alt="添加SSH Key到账户中"></p>
<p><strong> 6&gt; </strong> 执行以下命令验证SSH Key是否添加成功</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -T git@github.com</span><br></pre></td></tr></table></figure>
<p>执行的时候终端会提示以下内容，我们直接输入yes即可</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">The authenticity of host <span class="string">'github.com (207.97.227.239)'</span> can<span class="string">'t be established.</span><br><span class="line"># RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.</span><br><span class="line"># Are you sure you want to continue connecting (yes/no)?</span></span><br></pre></td></tr></table></figure>
<p>如果添加成功了，终端将会输出</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Hi username! You<span class="string">'ve successfully authenticated, but GitHub does not</span><br><span class="line"># provide shell access.</span></span><br></pre></td></tr></table></figure>
<h4 id="1-3_新建Repository">1.3 新建Repository</h4><p>最后，我们需要创建一个Repository进行我们的博客托管，这个Repository的命名必须遵循以下规范<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">username<span class="class">.github</span><span class="class">.io</span></span><br></pre></td></tr></table></figure></p>
<p>例如，我的用户名是xiaoxuetu，那么我的这个Repository名字就必须是 <code>xiaoxuetu.github.io</code> </p>
<p><img src="/assets/blog_img/hexo-issue/github_new_repository.png" alt="创建Repository"></p>
<p>至此，我们关于GitHub的配置已经完成。</p>
<h2 id="2_Hexo_配置">2 Hexo 配置</h2><p>为了让我们能够方便的将博客部署到GitHub中，Hexo提供了 <code>hexo-deployer-git</code> 组件，下面我们来进行简单的说明。</p>
<h4 id="2-1_配置Deploy插件">2.1 配置Deploy插件</h4><p>1&gt; 打开我们的博客根目录下的 <code>_config.yml</code> 文件，设置deploy的信息，注意要讲repository的链接替换成你所见的repository对应的链接</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git                                                      # 设置发布类型，如git     </span><br><span class="line">  repository: git@github.com:xiaoxuetu/xiaoxuetu.github.io.git   # 设置repository对应的链接</span><br><span class="line">  branch: master                                                 # 设置提交到的分支</span><br><span class="line">  message: Site updated at &#123;&#123; now("YYYY-MM-DD HH:mm:ss") &#125;&#125;      # 设置我们提交的信息</span><br></pre></td></tr></table></figure>
<h4 id="2-2_发布">2.2 发布</h4><p><strong> 1&gt; </strong> 执行以下命令生成博客的静态页面</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo g    <span class="comment"># 等同于 hexo generate, g 就是 generate 的缩写</span></span><br></pre></td></tr></table></figure>
<p><strong> 2&gt; </strong> 执行以下命令将我们生成的博客静态页面上传到GitHub</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo d    <span class="comment"># 等同于 hexo deploy, d 就是 deploy 的缩写</span></span><br></pre></td></tr></table></figure>
<p><strong> 3&gt; </strong> 打开浏览器访问 <code>username.github.io</code> 即可访问我们刚部署到Github上的博客啦，比如我的就是 <code>xiaoxuetu.github.io</code> </p>
<p>以后如果我们再次添加了一篇新的博客，我们只要继续按照上面 <code>第 1 步</code> <code>第 2 步</code> 进行生成静态页面、部署到GitHub上即可。</p>
<p>如果有遇到一些资源不对或者其他问题时，可以尝试执行以下命令清除已经生成的静态文件，再重新执行上面的 <code>第 1 步</code> <code>第 2 步</code> 即可。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean    <span class="comment"># 删除已经生成的静态页面</span></span><br></pre></td></tr></table></figure>
<h2 id="3_结束语">3 结束语</h2><p>至此，我们已经顺利地利用Hexo搭建了属于我们自己的个人博客啦～ 大家一定要积极多发表原创作品哦！</p>
<p><br><br></p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="/assets/blog_img/hexo-issue/hexo_issue.png" alt="新品发布会-图片来自网络"></p>
<p>通过 <a href="/2015/08/29/hexo-mac-environment/">《利用Hexo搭建个人博客－环境搭建篇》</a>  以及 <a href="/2015/08/31/hexo-guide/">《利用Hexo搭建个人博客－博客初始化篇》</a>，我们了解到了利用Hexo搭建个人博客需要的环境以及配置，下面这篇文章将会介绍如何把我们的博文发布到github上。</p>]]>
    
    </summary>
    
      <category term="hexo" scheme="http://xiaoxuetu.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[利用Hexo搭建个人博客－博客初始化篇]]></title>
    <link href="http://xiaoxuetu.github.io/2015/08/31/hexo-guide/"/>
    <id>http://xiaoxuetu.github.io/2015/08/31/hexo-guide/</id>
    <published>2015-08-31T15:14:58.000Z</published>
    <updated>2015-11-19T12:52:43.000Z</updated>
    <content type="html"><![CDATA[<p><img src="/assets/blog_img/hexo-guide/hexo_hello_world.png" alt="图片来自网络"><br>上一篇博文 <a href="/2015/08/29/hexo-mac-environment/">《利用Hexo搭建个人博客－环境搭建篇》</a> 中，我们讲解了利用Hexo搭建个人博客应该要配置哪些环境。<br>相信大家已经迫不及待的想要知道接下来应该要怎么把自己的博客搭起来了，下面，让我们一起见证这奇迹的时刻。</p>
<a id="more"></a>
<h2 id="1_初始化博客">1 初始化博客</h2><p>首先，我们需要按照下面的步骤进行博客的初始化：</p>
<p><strong> 1&gt; </strong> 创建一个<font color="red">hexo-blog</font>文件夹，当然你也可以命名为其他名字,这里以hexo-blog为例</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir hexo-blog</span><br></pre></td></tr></table></figure>
<p><strong> 2&gt; </strong>  执行以下命令，Hexo将会在目标文件夹下建立博客需要的所有文件</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init</span><br></pre></td></tr></table></figure>
<p>这个时候终端会输出</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">INFO  Copying data to ~/Documents/workspace/git/hexo-blog</span><br><span class="line">INFO  You are almost <span class="keyword">done</span>! Don<span class="string">'t forget to run '</span>npm install<span class="string">' before you start blogging with Hexo!</span></span><br></pre></td></tr></table></figure>
<p>同时，hexo-blog目录下会生成以下文件:</p>
<ul>
<li>scaffolds   : 脚手架，用于存放我们创建文章时的模版</li>
<li>source      : 用于存放我们用markdown编写的博文原文件、其他静态资源文件</li>
<li>themes      : 用于存放主题，里面有我们博客的默认主题landscape</li>
<li>_config.yml : Hexo和站点的配置文件，里面可以设置博客的名字、标题、作者、链接格式等相关项</li>
</ul>
<p><strong> 3&gt; </strong>  执行以下命令进行依赖包安装</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo npm install</span><br></pre></td></tr></table></figure>
<p>执行成功后，hexo-blog目录下将会增加一个模块</p>
<ul>
<li>node_modules: 关联保存了将会使用到的hexo依赖包</li>
</ul>
<h2 id="2_配置博客">2 配置博客</h2><p>当我们的博客初始化完成以后，接下来要做的就是对其进行个性化的配置了.<br>为了让大家更好懂，下面我就以配置博客 <code>小学徒的成长历程</code> 为例进行讲解。</p>
<h4 id="2-1_Hexo设置">2.1 Hexo设置</h4><p>这个其实就是博客根目录下的 <code>_config.yml</code> 文件，主要是对Hexo的配置以及站点的相关配置，下面开始进行分段详细的说明</p>
<p>1&gt; 站点配置</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># Site</span><br><span class="line">title: 小学徒V的成长历程    # 网站标题</span><br><span class="line">subtitle: 挑战人生无极限，攀登人生更高峰    # 网站子标题</span><br><span class="line">description: 这是一个利用Hexo搭建的博客    # 网站描述</span><br><span class="line">author:  小学徒V   # 网站作者，也就是您的名字</span><br><span class="line">language: zh-cn   # 网站使用的语言        </span><br><span class="line">timezone:         # 网站时区。Hexo 预设使用您电脑的时区。</span><br></pre></td></tr></table></figure>
<p>2&gt; 网址配置</p>
<p>这个地方一般根据情况修改 <code>url</code> 和 <code>root</code> 即可。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># URL</span><br><span class="line">url: http://xiaoxuetu.github.io         # 博客网址</span><br><span class="line">root: /                                 # 网站根目录</span><br><span class="line">permalink: :year/:month/:day/:title/    # 文章的永久链接格式   :year/:month/:day/:title/</span><br><span class="line">permalink_defaults:                     # 永久链接中各部分的默认值</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong> 注意！ </strong><br>如果你的网站存放在子目录中，例如 <a href="http://xiaoxuetu.github.io/blog">http://xiaoxuetu.github.io/blog</a>, 则将url设为<a href="http://xiaoxuetu.github.io/blog，">http://xiaoxuetu.github.io/blog，</a> 并且把 root 设为/blog/。</p>
</blockquote>
<p>3&gt; 目录配置</p>
<p>这个地方一般直接取默认值不用修改。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># Directory</span><br><span class="line">source_dir: source         # 资源文件夹，这个文件夹用来存放内容，例如我们用markdown编写的博文</span><br><span class="line">public_dir: public         # 公共文件夹，这个文件夹用于存放生成的静态博客文件。</span><br><span class="line">tag_dir: tags              # 标签文件夹</span><br><span class="line">archive_dir: archives      # 归档文件夹</span><br><span class="line">category_dir: categories   # 分类文件夹</span><br><span class="line">code_dir: downloads/code   # Include code 文件夹</span><br><span class="line">i18n_dir: :lang            # 国际化（i18n）文件夹</span><br><span class="line">skip_render:               # 跳过指定文件的渲染，您可使用 glob 来配置路径。</span><br></pre></td></tr></table></figure>
<p>4&gt; 文章配置</p>
<p>这个地方一般直接取默认值不用修改。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># Writing</span><br><span class="line">new_post_name: :title.md    # 新文章的文件名称</span><br><span class="line">default_layout: post        # 预设布局</span><br><span class="line">titlecase: false            # 把标题转换为 titlecase（titlecase指的是将每个单词首字母转换成大写）</span><br><span class="line">external_link: true         # 在新标签中打开链接</span><br><span class="line">filename_case: 0            # 把文件名称转换为 (1) 小写或 (2) 大写, 0表示不变</span><br><span class="line">render_drafts: false        # 显示草稿</span><br><span class="line">post_asset_folder: false    # 启动 Asset 文件夹</span><br><span class="line">relative_link: false        # 把链接改为与根目录的相对位址</span><br><span class="line">future: true                # 显示未来的文章</span><br><span class="line">highlight:                  # 代码块的设置</span><br><span class="line">  enable: true              </span><br><span class="line">  line_number: true         # 是否显示行号</span><br><span class="line">  auto_detect: true         # 是否自动监测</span><br><span class="line">  tab_replace:              # 将 tab 替换成其他字符串</span><br></pre></td></tr></table></figure>
<p>5&gt; 分类和标签配置</p>
<p>这个地方一般直接取默认值不用修改。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># Category &amp; Tag</span><br><span class="line">default_category: uncategorized    # 默认分类, uncategorized表示未分类</span><br><span class="line">category_map:                      # 分类别名</span><br><span class="line">tag_map:                           # 标签别名</span><br></pre></td></tr></table></figure>
<p>6&gt; 日期 以及 时间格式 配置</p>
<p>Hexo 使用 Moment.js 来解析和现实时间，一般我们直接取默认值不用修改。<br>如果你想修改的话，可以按照 <a href="http://momentjs.com/docs/#/displaying/format/" target="_blank" rel="external">http://momentjs.com/docs/#/displaying/format/</a> 中定义的格式进行修改。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">date_format: YYYY-MM-DD           # 日期格式</span><br><span class="line">time_format: HH:mm:ss             # 时间格式</span><br></pre></td></tr></table></figure>
<p>7&gt; 分页配置</p>
<p>这个地方一般根据自己的需求修改 <code>per_page</code> 设置每页显示的文章数量即可。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># Pagination</span><br><span class="line">per_page: 10                      # 每页显示的文章量，如果设置值为0，则表示禁止分野</span><br><span class="line">pagination_dir: page              # 分页目录</span><br></pre></td></tr></table></figure>
<p>8&gt; 主题配置</p>
<p>一般从这里开始，都是属于Hexo拓展插件的配置了，下面这段是配置我们博客所要使用的主题名字，想要获取更多的主题，可以参考：<a href="http://hexo.io/themes/" target="_blank" rel="external">http://hexo.io/themes/</a></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># Extensions</span><br><span class="line">theme: landscape    # 主题设置，默认是 landscape</span><br></pre></td></tr></table></figure>
<p>9&gt; 部署配置</p>
<p>这一块涉及到博客发布，将在下一篇博文中统一进行讲解，这里可以先不用修改配置</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># Deployment</span><br><span class="line">deploy:</span><br><span class="line">  type:     # 设置发布类型，如git，rsync</span><br></pre></td></tr></table></figure>
<h4 id="2-2_主题设置">2.2 主题设置</h4><p>这个其实就是 <code>themes/{主题名称}/_config.yml</code> 文件了，主要是网站主题的一些配置，如需要显示的菜单、开启的组件等等。</p>
<p>不同的主题，都会增加了自己的一些特别开关，下面只以默认主题为例进行讲解。</p>
<p>1&gt; 菜单配置</p>
<p>这里主要是对博客显示的菜单项的访问路径进行配置，</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Header</span><br><span class="line">menu:                    # 菜单项的相关配置</span><br><span class="line">  Home: /                # 配置博客的主页路径</span><br><span class="line">  Archives: /archives    # 配置博客的归档路径</span><br><span class="line">rss: /atom.xml           # 配置博客的RSS订阅路径</span><br></pre></td></tr></table></figure>
<p>2&gt; 显示内容配置</p>
<p>这里主要对博客显示的内容进行设置，比如查看全文的按钮文本显示。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># Content</span><br><span class="line">excerpt_link: 阅读全文    # 设置查看全文的按钮显示文本</span><br><span class="line">fancybox: true           # 是否开启弹出层效果</span><br></pre></td></tr></table></figure>
<p>3&gt; 侧边栏配置</p>
<p>主要是对侧边栏展现进行设置。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># Sidebar</span><br><span class="line">sidebar: right    # 侧边栏展示的方向</span><br><span class="line">widgets:          # 侧边栏添加的组件配置</span><br><span class="line">- category        # 显示分类</span><br><span class="line">- tag             # 显示标签</span><br><span class="line">- tagcloud        # 显示标签云</span><br><span class="line">- archive         # 显示归档</span><br><span class="line">- recent_posts    # 显示最近发布</span><br></pre></td></tr></table></figure>
<p>3&gt; 其他配置</p>
<p>第1点 和 第2点 都是大部分主题通用的配置，下面这些就是比较定制化的了。除了下面列出的，国内大部分主题都还会添加了百度统计的ID配置、多说的ID配置、Jiathis分享活着百度分享的配置等等。</p>
<p>具体我们依旧是只讲解默认主题里面的。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># Miscellaneous</span><br><span class="line">google_analytics: "UA-********-1"    # 谷歌统计的ID配置，如果你没有用到，可以为空</span><br><span class="line">favicon: /favicon.png                # 网站图标路径</span><br><span class="line">twitter:                             # twitter配置</span><br><span class="line">google_plus:                         # google plus 配置</span><br><span class="line">fb_admins:                           # facebook 配置</span><br><span class="line">fb_app_id:</span><br></pre></td></tr></table></figure>
<p>至此，我们博客的 Hexo配置 和 主题配置 都完成了。</p>
<h2 id="3_创建博文_-_Hello_Hexo">3 创建博文 - Hello Hexo</h2><p>当我们的博客个性化配置完成后，我们一起来看下如何创建我们的第一篇博文－Hello Hexo.</p>
<p>1&gt; 进入到博客的根目录，执行以下命令生成新的博文</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new hello-hexo    <span class="comment"># 格式是： hexo new ｛文章名｝</span></span><br></pre></td></tr></table></figure>
<p>命令执行成功后，你就会发现在 <code>source/_posts</code> 目录下多了一个文件 <code>hello-hexo.md</code> 。<br>前面我们已经说到，我们的博文使用markdown语法进行编写的，后面的博文我会详细的进行markdown语法的讲解。<br>接下来，打开这个文件，我们可以看到以下内容：</p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">title: hello-hexo</span><br><span class="line">date: 2015-09-03 00:08:30</span><br><span class="line"><span class="header">tags:</span><br><span class="line">---</span></span><br></pre></td></tr></table></figure>
<p>他们的含义是：</p>
<ul>
<li>title : 文章的标题</li>
<li>date  : 该文章的创建时间</li>
<li>tags  : 该文章的标记tag</li>
</ul>
<p>下面我们可以更改成</p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">title: 你好，Hexo</span><br><span class="line">date: 2015-09-03 00:08:30</span><br><span class="line">tags: </span><br><span class="line"><span class="header">  - hexo</span><br><span class="line">---</span></span><br><span class="line"></span><br><span class="line">这是我的第一篇博客，你好，Hexo。</span><br></pre></td></tr></table></figure>
<p>到这里，我们的第一篇博客编写完毕。</p>
<h2 id="4_浏览博客效果">4 浏览博客效果</h2><p>经过了重重困难，我们终于配置好了我们的博客。深呼吸一口气，让我们一起来见证奇迹的时刻。</p>
<p>打开终端，在我们的hexo-blog目录下执行以下命令</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo s <span class="comment"># 等同于 hexo server , s 其实就是 server的缩写</span></span><br></pre></td></tr></table></figure>
<p>执行成功后，控制台将会输出</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INFO  Hexo is running at http://<span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">4000</span>/. Press Ctrl+C to stop.</span><br></pre></td></tr></table></figure>
<p>打开浏览器，我们可以看到我们用Hexo搭建好的使用默认主题的博客展现效果。</p>
<p><img src="/assets/blog_img/hexo-guide/hexo_hello_hexo_homepage.png" alt="Hello Hexo"></p>
<h2 id="5_结束语">5 结束语</h2><p>在这篇博客里，我们了解到了以下内容：</p>
<ul>
<li>如何进行博客的配置</li>
<li>如何进行主题的配置</li>
<li>如何创建我们的第一篇博客</li>
<li>如何预览我们的博客效果</li>
</ul>
<p>在下一篇博客里，我们将会讲解 “如何将我们的博客发布到github上”，敬请期待。</p>
<p><br><br></p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="/assets/blog_img/hexo-guide/hexo_hello_world.png" alt="图片来自网络"><br>上一篇博文 <a href="/2015/08/29/hexo-mac-environment/">《利用Hexo搭建个人博客－环境搭建篇》</a> 中，我们讲解了利用Hexo搭建个人博客应该要配置哪些环境。<br>相信大家已经迫不及待的想要知道接下来应该要怎么把自己的博客搭起来了，下面，让我们一起见证这奇迹的时刻。</p>]]>
    
    </summary>
    
      <category term="hexo" scheme="http://xiaoxuetu.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[利用Hexo搭建个人博客－环境搭建篇]]></title>
    <link href="http://xiaoxuetu.github.io/2015/08/29/hexo-mac-environment/"/>
    <id>http://xiaoxuetu.github.io/2015/08/29/hexo-mac-environment/</id>
    <published>2015-08-29T08:54:11.000Z</published>
    <updated>2015-11-19T12:52:20.000Z</updated>
    <content type="html"><![CDATA[<p><img src="/assets/blog_img/hexo-mac-environment/hexo_github.png" alt="图片来自网络"> </p>
<p>我是一个爱写博客进行总结分享的人。<br>然而，有着热爱写博客并且深知写博客好处的我，却没有好好的把这个习惯坚持下来。如今毕业已经一年多了吧，每一次与师弟师妹们聊天，我总会意味深长的建议他们，一定要定期梳理总结自身所学的知识，而写博客就是其中的一个很不错的方式……<br>OK，感慨的话，就不多说了，下面我们开始慢慢的进入我们的主题－“利用Hexo搭建个人博客”吧。<br><a id="more"></a></p>
<h2 id="1_前言">1 前言</h2><p>喜欢写博客的人都会经历这么三个阶段。</p>
<blockquote>
<p>第一阶段，刚接触Blog，觉得很新鲜，试着选择一个免费空间来写。</p>
</blockquote>
<p>还记得那些年我还是个大二小鲜肉的时候，尚且不知道博客是个什么样的存在。作为IT世界的初哥，对IT充满了好奇与热情，为了将当时学习到的知识进行记录并且能够和小伙伴们分享，我把自己的总结一篇又一篇的记录到了QQ空间之中。<br>后来，在一个师兄的指导下，我慢慢的接触了博客。</p>
<ul>
<li><a href="http://www.csdn.net/" target="_blank" rel="external">CSDN</a> : 整体来说很不错的，但是由于每次涉及到图片的时候，总需要经过很多步骤，我才能将它显示在我的博客中，最终我选择了弃用。</li>
<li><a href="http://www.iteye.com/" target="_blank" rel="external">ITeye</a> : 主要是Java的博客，但是我不大喜欢这个博客里面的踩这个功能，因为对于作为IT初哥的我，写的文章确实比较简单，没什么特别的技术含量，而在不断的发表过程中，总会有那么几个人踩，同时加上不文明、鄙视的话语，让我觉得不爽与受挫，最终也选择了弃用。</li>
<li><a href="http://www.cnblogs.com/" target="_blank" rel="external">博客园</a> : 这个是我在利用Hexo搭建博客以前一直使用的博客，曾经因为编写了 <a href="http://www.cnblogs.com/xiaoxuetu/archive/2013/03/29/2987805.html" target="_blank" rel="external">《Java的内存回收机制》</a> 被推到了头条而有点小出名。而且博客园也是我一直推荐给师弟师妹们写博客的地方。另外，如果你使用的是Windows的话，只要通过 <font color="red">QQ截图</font> +  <font color="red">火狐浏览器</font> ，截图后直接粘贴到编辑器中，最终浏览你的博文时就会发现它被转换成了base64存储了起来，非常方便。</li>
<li><a href="http://www.blogjava.net/" target="_blank" rel="external">blogjava</a> : 这个也是Java的殿堂，跟博客园差不多，但是因为我当时我已经定居于博客园，就没有在这里写了。</li>
</ul>
<blockquote>
<p>第二阶段，发现免费空间限制太多，就自己购买域名和空间，搭建独立博客。</p>
</blockquote>
<p>在我的带动下，越来越多的小伙伴也跟着写博客了。当我还是个即将踏出社会的懵懂大三少年时，由于现有的博客自定义性太低，加上越来越流行的Wordpress，许多小伙伴们都豪爽的自己掏腰包购买域名和空间，搭建了属于自己的个人博客。<br>那时候，我真的好羡慕他们那么土豪，作为小山区出来的我，考虑到腰包和博客维护问题，就还是继续呆在博客园，可谓是博客园的忠实用户。</p>
<blockquote>
<p>第三阶段，觉得独立博客的管理太麻烦，最好在保留控制权的前提下，让别人来管，自己只负责写文章。</p>
</blockquote>
<p>突然有一天，博客访问不到了，需要紧急处理；出来实习工作后，太忙了，没时间写博客，感觉投入产出比不高了……<br>慢慢的，小伙伴们发现独立博客虽然没有了免费空间的限制，但是管理、维护和金钱等各种成本太高了，于是有一大部分的朋友因为已经找到工作稳定了，慢慢的没有再写博客了；也有一部分同学开始去追寻能够保留控制权，而服务器等问题又能够交给别人处理，自己能够专心写博客的方式。<br>到了这个阶段，开始有朋友发现并且使用了Hexo + Github 的方式，而有着同样追求的我，也慢慢的跟着开始了这么一个历程～</p>
<h2 id="2_介绍">2 介绍</h2><p>既然使用<font color="red">Hexo</font> + <font color="red">Github</font>搭建个人博客有那么多的好处，我们自然不能错过，事不宜迟，我们现在立马来认识一下，他们究竟是何方神圣吧。</p>
<h4 id="2-1_关于_GitHub">2.1 关于 GitHub</h4><p><strong> 2.1.1 Github </strong></p>
<p>接触编程一段时间后，相信大家都会开始了解到版本控制，如SVN、HG。是的，Github是一个知名的 <font color="red">分布式版本控制系统</font> 以及 <font color="red">开源代码库</font>。</p>
<p>在本次博客搭建中，也是需要大家能够具备一定的Git版本控制知识的。大家放心，后文会对必须用到的命令进行讲解，但如果你想要对它有更详细的认知，可以在空余的时候参考以下链接：</p>
<p>链接: <a href="https://github.com/" target="_blank" rel="external">点击访问</a></p>
<p>详细介绍: <a href="http://git-scm.com/book/zh/v1/%E8%B5%B7%E6%AD%A5-%E5%85%B3%E4%BA%8E%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6" target="_blank" rel="external">Git Book</a></p>
<p><strong> 2.1.2 Github Pages </strong></p>
<p>在Github里面，每一个项目都拥有它的一个主页，列出项目的源文件，但是对于新手来说，看到那么多的源代码，只会让人感到头晕脑胀，无从下手，他更希望的是，该项目有一个简明易懂的页面，告诉他每一步要怎么去做。<br>因此，Github就设计了Github Pages这个功能，允许用户自定义项目首页，用来替代默认的源码列表。所以，Github Pages可以被认为是用户编写的、托管在github上的静态网页。<br>有的用户说，我前端渣渣，这个功能对我来说，并没有什么卵用，还不如用个记事本写好上传给大家看。Github似乎早就考虑到了这一点，设计了几个漂亮的模版供用户直接选择使用。</p>
<p>链接：<a href="https://pages.github.com/" target="_blank" rel="external">点击访问</a></p>
<p>而我们也正是利用了Github Pages这一个特性，去搭建属于我们的个人博客。</p>
<p><img src="/assets/blog_img/hexo-mac-environment/github_pages_themes.png" alt="图片来自Github Pages"></p>
<h4 id="2-2_关于_Hexo">2.2 关于 Hexo</h4><p>按照官网的说法，Hexo是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p>
<p>链接：<a href="https://hexo.io/zh-cn/" target="_blank" rel="external">点击访问</a></p>
<h4 id="2-3_Hexo_+_Github">2.3 Hexo + Github</h4><p>通过上面的介绍，大家对Hexo和Github已经有了大概的了解。<br>没错，我们的方式就是，利用Markdown进行博客的编写，通过Hexo这个框架解析生成靓丽的静态页面，然后部署到Github上供大家浏览。<br>这种方法具备好处是:</p>
<ul>
<li>免费，无限流量。</li>
<li>享受git的版本管理功能，不用担心文章遗失。</li>
<li>专注于我们自己的博客内容，其他诸如服务器管理的事情交给Github即可</li>
</ul>
<p>当然啦，万事有利有弊。这种方式也有它的弊端:</p>
<ul>
<li>有一定技术门槛，你必须要懂一点git和网页开发。</li>
<li>生成的是静态网页，添加动态功能必须使用外部服务，比如评论功能我们使用多说。</li>
<li>不适合大型网站，因为没有用到数据库，每运行一次都必须遍历全部的文本文件，网站越大，生成时间越长。</li>
</ul>
<p>但是，这已经基本满足我们第三阶段的需求啦。</p>
<h2 id="3_正文">3 正文</h2><p>说了那么多，终于到正文啦！</p>
<p>本文将以 <font color="red">Mac OS</font> 和  <font color="red">Hexo 3.1.1</font> 为例进行讲解。</p>
<h4 id="3-1_环境搭建_-_Git">3.1 环境搭建 - Git</h4><p>下载地址: <a href="http://git-scm.com/downloads" target="_blank" rel="external">点击下载</a></p>
<p>如图，根据你的系统点击下载相应平台的Git进行安装，这里我们以Mac OS 为例，自然选择的是 Mac OS </p>
<p><img src="/assets/blog_img/hexo-mac-environment/git_client_download.png" alt="图片来自Git Client"></p>
<p>下载并且安装完成后，打开终端执行以下命令进行验证</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git --version</span><br></pre></td></tr></table></figure>
<p>如果终端输出类似下面的内容，说明安装成功了</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git version <span class="number">2.3</span>.<span class="number">2</span> (Apple Git-<span class="number">55</span>)</span><br></pre></td></tr></table></figure>
<h4 id="3-2_环境搭建_-_NodeJS">3.2 环境搭建 - NodeJS</h4><p>下载地址: <a href="https://nodejs.org/download/" target="_blank" rel="external">点击下载</a></p>
<p>如图，根据你的系统点击下载相应平台的NodeJS进行安装，个人比较喜欢通过tar.gz的方式进行安装，所以如图点击下载了64位的tar.gz</p>
<p><img src="/assets/blog_img/hexo-mac-environment/nodejs_download.png" alt="图片来自Git Client"></p>
<p>1&gt; 将下载下来的tar.gz文件解压并且存放到 <font color="red">~/Applications/</font>路径下<br>2&gt; 将 NodeJS 配置到环境变量中－ 打开 <font color="red">~/.bash_profile</font> 文件，复制以下内容到文件中，注意将<font color="red">(你电脑的用户名)</font> 替换成你的用户名</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> NODE_HOME=<span class="string">"/Users/(你电脑的用户名)/Applications/nodejs"</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$&#123;PATH&#125;</span>:<span class="variable">$&#123;NODE_HOME&#125;</span>/bin</span><br></pre></td></tr></table></figure>
<p>3&gt; 执行以下命令进行验证</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">source</span> ~/.bash_profile</span><br><span class="line">$ npm --version</span><br></pre></td></tr></table></figure>
<p>如果终端输出类似下面的内容，说明安装成功了</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.4</span>.<span class="number">28</span></span><br></pre></td></tr></table></figure>
<h4 id="3-3_环境搭建_-_Hexo">3.3 环境搭建 - Hexo</h4><p>1&gt; 执行以下命令进行Hexo框架的基本安装</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-cli -g</span><br></pre></td></tr></table></figure>
<p>2&gt; 安装便于自动部署到Github上的插件</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>
<p>3&gt; 安装atom生成插件，便于感兴趣的小伙伴们订阅</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-generator-feed --save</span><br></pre></td></tr></table></figure>
<p>4&gt; 安装博客索引生成插件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-generator-index --save</span><br></pre></td></tr></table></figure></p>
<p>5&gt; 安装归档生成插件</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-generator-archive --save</span><br></pre></td></tr></table></figure>
<p>6&gt; 安装tag生成插件</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-generator-tag --save</span><br></pre></td></tr></table></figure>
<p>7&gt; 安装category生成插件</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-generator-category --save</span><br></pre></td></tr></table></figure>
<p>8&gt; 安装Sitemap文件生成插件</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-generator-sitemap --save</span><br></pre></td></tr></table></figure>
<p>9&gt; 安装百度Sitemap文件生成插件，因为普通的Sitemap格式不符合百度的要求</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-generator-baidu-sitemap --save</span><br></pre></td></tr></table></figure>
<h4 id="3-4_问题及解决方法">3.4 问题及解决方法</h4><p>这个小章节主要是个人在安装过程中遇到的问题以及解决方法, 也欢迎大家将遇到的问题添加到评论中，方便其他小伙伴在遇到的时候可以快速定位和解决</p>
<p>1、 <strong>问题</strong>：在进行hexo-cli 或者 利用npm安装hexo其他相关组件的时候遇到<span style="background-color:#F79898;">shasum check failed</span>问题时改怎么办？</p>
<p><strong>解决方法</strong>：执行以下命令切换到国内的镜像,重新执行npm进行组件安装即可</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm --registry https://registry.npm.taobao.org info underscore</span><br></pre></td></tr></table></figure>
<h2 id="4_结束语">4 结束语</h2><p>恭喜你，至此，关于利用Hexo + Github 搭建个人博客所需要的基本环境已经准备完毕。下一篇博客，我将会介绍配置Hexo来搭建我们的博客-Hello World。<br><br><br></p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="/assets/blog_img/hexo-mac-environment/hexo_github.png" alt="图片来自网络"> </p>
<p>我是一个爱写博客进行总结分享的人。<br>然而，有着热爱写博客并且深知写博客好处的我，却没有好好的把这个习惯坚持下来。如今毕业已经一年多了吧，每一次与师弟师妹们聊天，我总会意味深长的建议他们，一定要定期梳理总结自身所学的知识，而写博客就是其中的一个很不错的方式……<br>OK，感慨的话，就不多说了，下面我们开始慢慢的进入我们的主题－“利用Hexo搭建个人博客”吧。<br>]]>
    
    </summary>
    
      <category term="hexo" scheme="http://xiaoxuetu.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hello World]]></title>
    <link href="http://xiaoxuetu.github.io/2015/08/23/hello-world/"/>
    <id>http://xiaoxuetu.github.io/2015/08/23/hello-world/</id>
    <published>2015-08-23T04:58:00.000Z</published>
    <updated>2015-08-26T12:48:45.000Z</updated>
    <content type="html"><![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="http://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="http://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.<br><a id="more"></a></p>
<h2 id="Quick_Start">Quick Start</h2><h3 id="Create_a_new_post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run_server">Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate_static_files">Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy_to_remote_sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Welcome to <a href="http://hexo.io/">Hexo</a>! This is your very first post. Check <a href="http://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="http://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.<br>]]>
    
    </summary>
    
      <category term="hexo" scheme="http://xiaoxuetu.github.io/tags/hexo/"/>
    
  </entry>
  
</feed>
